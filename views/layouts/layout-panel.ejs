<!DOCTYPE html>
<html>
<head>
  <title>New Sails App</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" type="text/css">
  <link rel="stylesheet" href="Untitled.css">
  <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
  <script src="//netdna.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.min.js"></script>
  <script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
  <script src="/assets/js/js-panel.js"></script>
  <!--
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus
  -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/css-panel.css">
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/styles/theme.css">
  <link rel="stylesheet" href="/styles/Untitled.css">
  <!--STYLES END-->
</head>

<body>
<nav class="navbar navbar-expand-md bg-primary navbar-dark">
  <div class="container"> <a class="navbar-brand" href="/">Navbar</a> <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbar2SupportedContent"> <span class="navbar-toggler-icon"></span> </button>
    <div class="collapse navbar-collapse text-center justify-content-end" id="navbar2SupportedContent">
      <ul class="navbar-nav">
        <li class="nav-item"> <a class="nav-link" href="#"><i class="fa d-inline fa-lg fa-bookmark-o"></i> Bookmarks</a> </li>
        <li class="nav-item"> <a class="nav-link" href="#"><i class="fa d-inline fa-lg fa-id-card-o"></i> Ajustes</a> </li>
      </ul> <a href="#" class="btn navbar-btn btn-primary ml-2 text-white"><i class="fa d-inline fa-lg fa-user-circle-o"></i>&nbsp;Log out</a>
    </div>
  </div>
</nav>

<%- body %>


<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
    require that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different view engine (handlebars, dust, pug/jade, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--
    Server-side View Locals
    ========================

    Sometimes, it's convenient to get access to your server-side view locals from
    client-side JavaScript.  This can improve page load times, remove the need for
    extra AJAX requests, and make your client-side code easier to understand and
    to maintain.  Sails provides a simple mechanism for accessing dynamic view
    locals: the "exposeLocalsToBrowser()" view partial.

    For more information on using this built-in feature, see:
    https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

-->


<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->

<!--SCRIPTS-->
<script src="/dependencies/sails.io.js"></script>
<script src="/js/js-panel.js"></script>
<!--SCRIPTS END-->
</body>
</html>
